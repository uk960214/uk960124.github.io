<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Koowoy Devs</title>
    <link>http://uk960214.github.io/tags/algorithm/</link>
    <description>Recent content in Algorithm on Koowoy Devs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Nov 2021 13:58:09 +0900</lastBuildDate><atom:link href="http://uk960214.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dijkstra&#39;s Algorithm on JavaScript</title>
      <link>http://uk960214.github.io/posts/til/21-11-05/</link>
      <pubDate>Fri, 05 Nov 2021 13:58:09 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-11-05/</guid>
      <description>Definition of Dijkstra&amp;rsquo;s Algorithm  Algorithm to calculate the shortest path from one vertex of a graph to another vertex, using a priority array
 Input and Output  Input: starting vertex, ending vertex Output: an array of vertices consisting of the shortest path from start to end in order  Logic 1. To begin with, 4 variables need to be initialized.  distances object: used to store the shortest distance from start to each vertex previous object: used to store the previous vertex of the path shortest to the current vertex priority queue: used to store vertices to pay visits to, in ascending order of distances from the starting vertex to the current vertex, this will be used for looping through the graph path: an array for storing path info at the end for returning the path  2.</description>
    </item>
    
    <item>
      <title>Sorting Algorithms</title>
      <link>http://uk960214.github.io/posts/til/21-10-22/</link>
      <pubDate>Fri, 22 Oct 2021 18:58:41 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-10-22/</guid>
      <description>1. Bubble Sort  In each loop, place the largest number on the top, creating a &amp;ldquo;bubble&amp;rdquo;
 const bubbleSort = (arr) =&amp;gt; { for (let i = arr.length - 1; i &amp;gt; 0; i--) { let swap = false; for (let j = 0; j &amp;lt; i; j++) { if(arr[j] &amp;gt; arr[j + 1]) { let temp = arr[j + 1]; arr[j + 1] = arr[j]; arr[j] = temp; swap = true; } } if(!</description>
    </item>
    
    <item>
      <title>JavaScript Recursion Exercise</title>
      <link>http://uk960214.github.io/posts/til/21-10-21/</link>
      <pubDate>Thu, 21 Oct 2021 23:07:01 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-10-21/</guid>
      <description>Flatten  Create a function that flattens all nested arrays in the given array.
 My initial instinct was to use the JavaScript function .flat() and recursion. However, a problem occurred with the base case. In order for recursion to function correctly, the base case needs to be set to determine if the recursion should stop. In my above solution, I wanted to compare the array before and after flattening it.</description>
    </item>
    
    <item>
      <title>Problem Solving Patterns</title>
      <link>http://uk960214.github.io/posts/til/21-10-18/</link>
      <pubDate>Tue, 19 Oct 2021 01:17:23 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-10-18/</guid>
      <description>Source: JavaScript Algorithms and Data Structures Masterclass Frequency Counter  When counting frequency of iterable objects, avoid nested looping that results in O(n^2), by using objects or sets to collect values.
 Example  Create a function named &amp;ldquo;same&amp;rdquo; that compares 2 arrays, and check if one array contains the squared values of the other, with matching frequencies
 The Naive Solution  Use nested loop to check if squared value of current looping element exists.</description>
    </item>
    
    <item>
      <title>[Sidenote/JS] Using Stack for Maximum Efficiency</title>
      <link>http://uk960214.github.io/posts/sidenote/sidenote_21-06-28/</link>
      <pubDate>Mon, 28 Jun 2021 22:57:42 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/sidenote/sidenote_21-06-28/</guid>
      <description>Solution Reference:
https://programmers.co.kr/questions/17409
Task https://programmers.co.kr/learn/courses/30/lessons/12973
Given a string of characters, if two of the same alphabet in a row is to be deleted until there is none left, check if this possible with the given string.
Solution function solution(s) { // Split string into array  let arr = s.split(&amp;#39;&amp;#39;); // Set temporary stack array  let temp = []; // If string length is odd number, return 0  if (arr.</description>
    </item>
    
    <item>
      <title>[JS/Problem Solving] Getting the highest possible number</title>
      <link>http://uk960214.github.io/posts/til/21-03-06/</link>
      <pubDate>Sat, 06 Mar 2021 22:22:39 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-03-06/</guid>
      <description>Task Requirements A number between 0 and 1,000,000 and k that is smaller than the first number is given. When k amount of digit is removed, return the highest possible number.
My Attemps for Solution No.1) Using Combination On first thought, I wasn&amp;rsquo;t aware of how big the number could be, and came up with the idea to find all possiblities and to compare these to find the maximum value.</description>
    </item>
    
    <item>
      <title>[Sidenote/JS] Using Recursion to Get All Possible Combinations</title>
      <link>http://uk960214.github.io/posts/sidenote/sidenote_21-03-06/</link>
      <pubDate>Sat, 06 Mar 2021 21:33:37 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/sidenote/sidenote_21-03-06/</guid>
      <description>The definition of combination in mathematics is as follows:
 In mathematics, a combination is a selection of items from a collection, such that the order of selection does not matter. (from Wikipedia)
 In order to get all the possible selections, the following formula is used:
image-source
The first part refers to all the combination that includes a certain value, and the latter part refers to all the combinations that does not include that value.</description>
    </item>
    
    <item>
      <title>Enlightenment of the Day 21.02.01</title>
      <link>http://uk960214.github.io/posts/enlightenments/enlightenment-21-02-01/</link>
      <pubDate>Mon, 01 Feb 2021 21:03:03 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/enlightenments/enlightenment-21-02-01/</guid>
      <description>Sorting and Locking Pairs for Tideman (CS50 Problem Set 3) The Original Problem Explained (Tideman)  The Problem Encountered Although with the test sets provided with the example seemed to work just fine with the code I originally wrote, when graded, it showed that my code didn&amp;rsquo;t lock the pairs correctly (meaning it didn&amp;rsquo;t lock what it was supposed to, and locked pairs where it should have skipped).
1. Sorting Problem Instructions</description>
    </item>
    
  </channel>
</rss>
