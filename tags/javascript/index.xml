<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Koowoy Devs</title>
    <link>http://uk960214.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on Koowoy Devs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Oct 2021 18:58:41 +0900</lastBuildDate><atom:link href="http://uk960214.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sorting Algorithms</title>
      <link>http://uk960214.github.io/posts/til/21-10-22/</link>
      <pubDate>Fri, 22 Oct 2021 18:58:41 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-10-22/</guid>
      <description>1. Bubble Sort  In each loop, place the largest number on the top, creating a &amp;ldquo;bubble&amp;rdquo;
 const bubbleSort = (arr) =&amp;gt; { for (let i = arr.length - 1; i &amp;gt; 0; i--) { let swap = false; for (let j = 0; j &amp;lt; i; j++) { if(arr[j] &amp;gt; arr[j + 1]) { let temp = arr[j + 1]; arr[j + 1] = arr[j]; arr[j] = temp; swap = true; } } if(!</description>
    </item>
    
    <item>
      <title>JavaScript Recursion Exercise</title>
      <link>http://uk960214.github.io/posts/til/21-10-21/</link>
      <pubDate>Thu, 21 Oct 2021 23:07:01 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-10-21/</guid>
      <description>Flatten  Create a function that flattens all nested arrays in the given array.
 My initial instinct was to use the JavaScript function .flat() and recursion. However, a problem occurred with the base case. In order for recursion to function correctly, the base case needs to be set to determine if the recursion should stop. In my above solution, I wanted to compare the array before and after flattening it.</description>
    </item>
    
    <item>
      <title>Problem Solving Patterns</title>
      <link>http://uk960214.github.io/posts/til/21-10-18/</link>
      <pubDate>Tue, 19 Oct 2021 01:17:23 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-10-18/</guid>
      <description>Source: JavaScript Algorithms and Data Structures Masterclass Frequency Counter  When counting frequency of iterable objects, avoid nested looping that results in O(n^2), by using objects or sets to collect values.
 Example  Create a function named &amp;ldquo;same&amp;rdquo; that compares 2 arrays, and check if one array contains the squared values of the other, with matching frequencies
 The Naive Solution  Use nested loop to check if squared value of current looping element exists.</description>
    </item>
    
    <item>
      <title>[JavaScript] Sending AJAX Request to Django Backend for Spotify Music Search</title>
      <link>http://uk960214.github.io/posts/til/21-08-08/</link>
      <pubDate>Sat, 21 Aug 2021 21:14:53 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-08-08/</guid>
      <description>Task Create a search input and add an event listener to it in JavaScript. Whenever the search query changes, send a request to the view in the backend via url.
Code // Function to Get Token function getCookie(name) { let cookieValue = null; if (document.cookie &amp;amp;&amp;amp; document.cookie !== &amp;#34;&amp;#34;) { const cookies = document.cookie.split(&amp;#34;;&amp;#34;); for (let i = 0; i &amp;lt; cookies.length; i++) { const cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?</description>
    </item>
    
    <item>
      <title>[JavaScript] Custom Music Player</title>
      <link>http://uk960214.github.io/posts/til/21-08-07/</link>
      <pubDate>Fri, 20 Aug 2021 20:07:50 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-08-07/</guid>
      <description>Background The audio tag from HTML provides a default music player, or more specifically the browser provides a controllable music player for audio tags. However, since this is powered by the browser, customizing the player to fit the style and need of the web page is impossible. Therefore the alternative is to create a custom music player that is connected to the original audio source.
Code HTML &amp;lt;!-- hidden audio tag (with tachyon display-none class) --&amp;gt; &amp;lt;audio class=&amp;#34;media-player dn&amp;#34; src=&amp;#34;{{ post.</description>
    </item>
    
    <item>
      <title>TIL of the Past: 20-10-10</title>
      <link>http://uk960214.github.io/posts/til/til_of_past/20-10-10/</link>
      <pubDate>Fri, 23 Jul 2021 21:48:34 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/til_of_past/20-10-10/</guid>
      <description>Promise  The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.
 In simple words, promise is used to process async operation, and when successful it returns a single value. It is mainly used to process data received from a different source and display on the page.
Before promise, async operations were processed with a chain of callback functions, which, in complex cases, made the code very hard to read.</description>
    </item>
    
    <item>
      <title>[Javascript] Conversion from if statement to OR expression | Deconstruction</title>
      <link>http://uk960214.github.io/posts/til/21-07-19/</link>
      <pubDate>Mon, 19 Jul 2021 17:49:20 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-07-19/</guid>
      <description>The following themes are newly learned features of Javascript.
Short-Circuit Evaluation and OR Expression While using the logical operators, for instance and, or, and not, there are cases where the assessment of the second value is irrelevant. For example in OR expressions, when the first value is true, the expression is true no matter the second value of the expression. In these cases, Javascript chooses not to evaluate the second value, and this is called &amp;ldquo;short-circuit evaluation&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>TIL of the Past: 20-10-07</title>
      <link>http://uk960214.github.io/posts/til/til_of_past/20-10-07/</link>
      <pubDate>Sun, 11 Jul 2021 14:14:23 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/til_of_past/20-10-07/</guid>
      <description>React - Create React App Creating a react app was&amp;hellip; harder than I expected, although Repl.it supported React template and even the Create React App template.
Concept of React With React, front end can be broken down into &amp;ldquo;Components&amp;rdquo;, which allows for further uses of the function later on.
Literally, it means that parts of html is written in pieces in javascript form, so that it can be written more efficiently with lots more extensibility.</description>
    </item>
    
    <item>
      <title>TIL of the Past: 20-10-03</title>
      <link>http://uk960214.github.io/posts/til/til_of_past/20-10-03/</link>
      <pubDate>Sat, 26 Jun 2021 22:17:41 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/til_of_past/20-10-03/</guid>
      <description>JavaScript - Advanced Loop Along with the for, while, do, and forEach loop, the topic in this section was the usage of for of and for in loop.
The idea is generally similar to the one of forEach loop, but the difference of &amp;lsquo;for in&amp;rsquo; loop compared to the other two was that &amp;lsquo;for in&amp;rsquo; was enumerating, while the other two were iterating. A more thorough explanation is provided by this link, to be honest, I&amp;rsquo;m still not 100% sure.</description>
    </item>
    
    <item>
      <title>Index and Search (2021 Kakao Blind Recruitment)</title>
      <link>http://uk960214.github.io/posts/til/21-06-24/</link>
      <pubDate>Thu, 24 Jun 2021 23:12:30 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-06-24/</guid>
      <description>Task https://programmers.co.kr/learn/courses/30/lessons/72412;
My Solution referenced from:
 https://velog.io/@alvin/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4-%EC%88%9C%EC%9C%84-%EA%B2%80%EC%83%89-Javascript https://12bme.tistory.com/120  function solution(info, query) { let answer = []; // store every possible combination that every info can match to  let combinations = {}; const getCombinations = (arr, score, init) =&amp;gt; { let spec = arr.join(&amp;#39;&amp;#39;); let value = combinations[spec]; // add score to combination object  if (value) { combinations[spec].push(score); } else { combinations[spec] = [score]; } // recursive function, to loop through every possibility  for (let i = init; i &amp;lt; arr.</description>
    </item>
    
    <item>
      <title>[Javascript Regex] Recommending Alternative ID</title>
      <link>http://uk960214.github.io/posts/til/21-02-03/</link>
      <pubDate>Wed, 03 Feb 2021 22:00:55 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-02-03/</guid>
      <description>Task Requirements The Rules for the ID  Length of the ID must be 3 to 15 characters.
  Only alphanumeric(lowercase) characters and [ -] , [ _ ], [ . ] are allowed.
  [ . ] can not be used at the beginning and the end, and cannot be used consecutively.
 Seven Steps in Creating Recommended ID Step 1. Change all the uppercase letters to lowercase.</description>
    </item>
    
    <item>
      <title>Identifying the Loser from a Game of Word Chain</title>
      <link>http://uk960214.github.io/posts/til/21-02-02/</link>
      <pubDate>Tue, 02 Feb 2021 22:01:14 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-02-02/</guid>
      <description>Rule of the Game Certain number of players present a word in turns, that begins with the letter of the last word&amp;rsquo;s ending. For instance, if the last word was apple, the current player needs to present a word that starts with e. No word can be presented twice in the same game.
Therefore the loser is a. whose word presented didn&#39;t begin with the last word&#39;s ending(let&#39;s call this following the previous word) or b.</description>
    </item>
    
    <item>
      <title>Enlightenment of the Day 21.01.21</title>
      <link>http://uk960214.github.io/posts/enlightenments/enlightenment-21-01-21/</link>
      <pubDate>Thu, 21 Jan 2021 13:58:10 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/enlightenments/enlightenment-21-01-21/</guid>
      <description>Getting Student with Highest Score Problem 3 Students are taking a multiple choice test with 5 answer options. Without actually solving the problem, they repeat the same pattern of numbers. When fed with the answer array, return the student who scored the highest.  Requirements 1. The pattern of each student is as follows: Student 1: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2 .... Student 2: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3 .</description>
    </item>
    
    <item>
      <title>Enlightenment of the Day 21.01.11</title>
      <link>http://uk960214.github.io/posts/enlightenments/enlightenment-21-01-11/</link>
      <pubDate>Mon, 11 Jan 2021 00:07:50 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/enlightenments/enlightenment-21-01-11/</guid>
      <description>Situation Solving the following task on Programmers (Link) Task  An interger array &amp;lsquo;numbers&amp;rsquo; is given. Create a function that returns an array consisting of sums of 2 numbers of different index sorted in an ascending order.
 Resitrictions   The length of &amp;lsquo;numbers&amp;rsquo; is between 2 to 100. All of the numbers of are bewtween 0 to 100.   Input/Output example     numbers result     [2, 1, 3, 4, 1] [2, 3, 4, 5, 6, 7]   [5, 0, 2, 7] [2, 5, 7, 9, 12]     My Approach to the Solution   Initially    Logic Sort the input array in ascending order =&amp;gt; loop through the array using forEach =&amp;gt; in each iteration, map the array, adding the current value to the array =&amp;gt; add all that to a result array =&amp;gt; using Set, pick out unique values</description>
    </item>
    
  </channel>
</rss>
