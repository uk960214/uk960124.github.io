<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Koowoy Devs</title>
    <link>http://uk960214.github.io/tags/algorithm/</link>
    <description>Recent content in Algorithm on Koowoy Devs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Jun 2021 22:57:42 +0900</lastBuildDate><atom:link href="http://uk960214.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Sidenote/JS] Using Stack for Maximum Efficiency</title>
      <link>http://uk960214.github.io/posts/sidenote/sidenote_21-06-28/</link>
      <pubDate>Mon, 28 Jun 2021 22:57:42 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/sidenote/sidenote_21-06-28/</guid>
      <description>Solution Reference:
https://programmers.co.kr/questions/17409
Task https://programmers.co.kr/learn/courses/30/lessons/12973
Given a string of characters, if two of the same alphabet in a row is to be deleted until there is none left, check if this possible with the given string.
Solution function solution(s) { // Split string into array  let arr = s.split(&amp;#39;&amp;#39;); // Set temporary stack array  let temp = []; // If string length is odd number, return 0  if (arr.</description>
    </item>
    
    <item>
      <title>[JS/Problem Solving] Getting the highest possible number</title>
      <link>http://uk960214.github.io/posts/til/21-03-06/</link>
      <pubDate>Sat, 06 Mar 2021 22:22:39 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/til/21-03-06/</guid>
      <description>Task Requirements A number between 0 and 1,000,000 and k that is smaller than the first number is given. When k amount of digit is removed, return the highest possible number.
My Attemps for Solution No.1) Using Combination On first thought, I wasn&amp;rsquo;t aware of how big the number could be, and came up with the idea to find all possiblities and to compare these to find the maximum value.</description>
    </item>
    
    <item>
      <title>[Sidenote/JS] Using Recursion to Get All Possible Combinations</title>
      <link>http://uk960214.github.io/posts/sidenote/sidenote_21-03-06/</link>
      <pubDate>Sat, 06 Mar 2021 21:33:37 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/sidenote/sidenote_21-03-06/</guid>
      <description>The definition of combination in mathematics is as follows:
 In mathematics, a combination is a selection of items from a collection, such that the order of selection does not matter. (from Wikipedia)
 In order to get all the possible selections, the following formula is used:
image-source
The first part refers to all the combination that includes a certain value, and the latter part refers to all the combinations that does not include that value.</description>
    </item>
    
    <item>
      <title>Enlightenment of the Day 21.02.01</title>
      <link>http://uk960214.github.io/posts/enlightenments/enlightenment-21-02-01/</link>
      <pubDate>Mon, 01 Feb 2021 21:03:03 +0900</pubDate>
      
      <guid>http://uk960214.github.io/posts/enlightenments/enlightenment-21-02-01/</guid>
      <description>Sorting and Locking Pairs for Tideman (CS50 Problem Set 3) The Original Problem Explained (Tideman)  The Problem Encountered Although with the test sets provided with the example seemed to work just fine with the code I originally wrote, when graded, it showed that my code didn&amp;rsquo;t lock the pairs correctly (meaning it didn&amp;rsquo;t lock what it was supposed to, and locked pairs where it should have skipped).
1. Sorting Problem Instructions</description>
    </item>
    
  </channel>
</rss>
